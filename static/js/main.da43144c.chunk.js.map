{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","feedbackNames","Object","keys","className","map","option","onClick","type","value","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","feedBacks","countTotalFeedback","event","target","totalFeedBack","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAgBeA,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCgBQC,MApBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC5BC,EAAgBC,OAAOC,KAAKJ,GAClC,OACE,oBAAIK,UAAU,UAAd,SACGH,EAAcI,KAAI,SAACC,GAAD,OACjB,6BACE,wBAAQC,QAASP,EAAiBQ,KAAK,SAASC,MAAOH,EAAvD,SACGA,KAFIA,SCyBFI,MA9Bf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,6BACE,uCAAUJ,OAEZ,6BACE,0CAAaC,OAEf,6BACE,uCAAUC,OAEZ,6BACE,yCAAYC,OAEd,6BACE,qDAAwBC,EAAxB,aCROC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC8DEC,MA3Df,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNR,EADM,KACAS,EADA,OAEiBD,mBAAS,GAF1B,mBAENP,EAFM,KAEGS,EAFH,OAGSF,mBAAS,GAHlB,mBAGNN,EAHM,KAGDS,EAHC,KAKPC,EAAY,CAAEZ,OAAMC,UAASC,OAoB7BW,EAAqB,WACzB,OAAOb,EAAOC,EAAUC,GAQ1B,OACE,gCACE,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAASwB,EACTvB,gBAhCkB,SAACyB,GAEzB,OADkBA,EAAMC,OAAhBjB,OAEN,IAAK,OACHW,EAAQT,EAAO,GACf,MACF,IAAK,UACHU,EAAWT,EAAU,GACrB,MACF,IAAK,MACHU,EAAOT,EAAM,SAyBf,cAAC,EAAD,CAASjB,MAAM,aAAf,SAC4B,IAAzB4B,IACC,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAtB8B,WACtC,IAAIY,EAAgBH,IACpB,OAAOG,EAAgBC,KAAKC,MAAc,IAAPlB,EAAcgB,GAAiB,EAoBtCG,WCpDhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da43144c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  const feedbackNames = Object.keys(options);\n  return (\n    <ul className=\"btnList\">\n      {feedbackNames.map((option) => (\n        <li key={option}>\n          <button onClick={onLeaveFeedback} type=\"button\" value={option}>\n            {option}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul>\n      <li>\n        <p>Good: {good}</p>\n      </li>\n      <li>\n        <p>Neutral: {neutral}</p>\n      </li>\n      <li>\n        <p> Bad: {bad}</p>\n      </li>\n      <li>\n        <p> Total: {total}</p>\n      </li>\n      <li>\n        <p> Positive feedback: {positivePercentage}%</p>\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { useState } from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const feedBacks = { good, neutral, bad };\n\n  const handleButtonClick = (event) => {\n    const { value } = event.target;\n    switch (value) {\n      case \"good\":\n        setGood(good + 1);\n        break;\n      case \"neutral\":\n        setNeutral(neutral + 1);\n        break;\n      case \"bad\":\n        setBad(bad + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let totalFeedBack = countTotalFeedback();\n    return totalFeedBack ? Math.round((good * 100) / totalFeedBack) : 0;\n  };\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={feedBacks}\n          onLeaveFeedback={handleButtonClick}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}